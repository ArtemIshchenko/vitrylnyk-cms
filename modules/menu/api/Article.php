<?php
namespace app\modules\article\api;

use Yii;

use app\modules\menu\models\Item;
use yii\helpers\Html;

/**
 * Menu module API
 * @package yii\easyii\modules\article\api
 *
 * @method static CategoryObject cat(mixed $id_slug) Get article category by id or slug
 * @method static array tree() Get article categories as tree
 * @method static array cats() Get article categories as flat array
 * @method static array items(array $options = []) Get list of articles as ArticleObject objects
 * @method static ArticleObject get(mixed $id_slug) Get article object by id or slug
 * @method static mixed last(int $limit = 1) Get last articles
 * @method static void plugin() Applies FancyBox widget on photos called by box() function
 * @method static string pages() returns pagination html generated by yii\widgets\LinkPager widget.
 * @method static \stdClass pagination() returns yii\data\Pagination object.
 */

class Menu extends \app\components\API
{
    private $_cats;
    private $_items;
    private $_adp;
    private $_item = [];
    private $_last;

    public function api_cat($id_slug)
    {
        if(!isset($this->_cats[$id_slug])) {
            $this->_cats[$id_slug] = $this->findCategory($id_slug);
        }
        return $this->_cats[$id_slug];
    }

    public function api_tree()
    {
        return Category::tree();
    }

    public function api_cats()
    {
        return Category::cats();
    }

    public function api_items()
    {
        $items = Item::find()
											->with('children')
											->sort()
											->all();
				if(!empty($items)) {
					
				}
        return $items;
    }

    public function api_get($id_slug)
    {
        if(!isset($this->_item[$id_slug])) {
            $this->_item[$id_slug] = $this->findItem($id_slug);
        }
        return $this->_item[$id_slug];
    }
		
		private function itemToHtml($item)
    {
			$html = '';
			if(empty($item[0]))
				$html = '&nbsp;';
			elseif(!isset($item[1]))
				$html = Html::tag('b', $item[0]);
			else
				$html = Html::a($item[0], ['catalog/view', 'slug' => $item[1]]);
			return $html;
		}

    private function findCategory($id_slug)
    {
        $category = Category::find()->where(['or', 'id=:id_slug', 'slug=:id_slug'], [':id_slug' => $id_slug])->status(Item::STATUS_ON)->one();

        return $category ? new CategoryObject($category) : null;
    }

    private function findItem($id_slug)
    {
        $article = Item::find()->where(['or', 'id=:id_slug', 'slug=:id_slug'], [':id_slug' => $id_slug])->status(Item::STATUS_ON)->one();
        if($article) {
            $article->updateCounters(['views' => 1]);
            return new ArticleObject($article);
        } else {
            return null;
        }
    }
}