<?php
namespace app\modules\article\api;

use Yii;

use yii\data\ActiveDataProvider;
use app\models\Tag;
use app\modules\article\models\Category;
use app\modules\article\models\Item;
use app\widgets\Fancybox;
use yii\widgets\LinkPager;
use yii\helpers\Html;
use app\helpers\Inflector;

/**
 * Article module API
 * @package yii\easyii\modules\article\api
 *
 * @method static CategoryObject cat(mixed $id_slug) Get article category by id or slug
 * @method static array tree() Get article categories as tree
 * @method static array cats() Get article categories as flat array
 * @method static array items(array $options = []) Get list of articles as ArticleObject objects
 * @method static ArticleObject get(mixed $id_slug) Get article object by id or slug
 * @method static mixed last(int $limit = 1) Get last articles
 * @method static void plugin() Applies FancyBox widget on photos called by box() function
 * @method static string pages() returns pagination html generated by yii\widgets\LinkPager widget.
 * @method static \stdClass pagination() returns yii\data\Pagination object.
 */

class Article extends \app\components\API
{
    private $_cats;
    private $_items;
    private $_adp;
    private $_item = [];
    private $_last;

    public function api_cat($id_slug)
    {
        if(!isset($this->_cats[$id_slug])) {
            $this->_cats[$id_slug] = $this->findCategory($id_slug);
        }
        return $this->_cats[$id_slug];
    }

    public function api_tree()
    {
        return Category::tree();
    }

    public function api_cats()
    {
        return Category::cats();
    }

    public function api_items($options = [])
    {
        if(!$this->_items){
            $this->_items = [];

            $with = ['seo', 'category'];
            if(Yii::$app->activeModules['article']->settings['enableTags']){
                $with[] = 'tags';
            }
            $query = Item::find()->with($with)->status(Item::STATUS_ON);

            if(!empty($options['where'])){
                $query->andFilterWhere($options['where']);
            }
            if(!empty($options['tags'])){
                $query
                    ->innerJoinWith('tags', false)
                    ->andWhere([Tag::tableName() . '.name' => (new Item())->filterTagValues($options['tags'])])
                    ->addGroupBy('item_id');
            }
            if(!empty($options['orderBy'])){
                $query->orderBy($options['orderBy']);
            } else {
                $query->sortDate();
            }

            $this->_adp = new ActiveDataProvider([
                'query' => $query,
                'pagination' => !empty($options['pagination']) ? $options['pagination'] : []
            ]);

            foreach($this->_adp->models as $model){
                $this->_items[] = new ArticleObject($model);
            }
        }
        return $this->_items;
    }

    public function api_last($limit = 1, $where = null)
    {
        if($limit === 1 && $this->_last){
            return $this->_last;
        }

        $result = [];

        $with = ['seo'];
        if(Yii::$app->activeModules['article']->settings['enableTags']){
            $with[] = 'tags';
        }
        $query = Item::find()->with($with)->status(Item::STATUS_ON)->sortDate()->limit($limit);
        if($where){
            $query->andFilterWhere($where);
        }

        foreach($query->all() as $item){
            $result[] = new ArticleObject($item);
        }

        if($limit > 1){
            return $result;
        }else{
            $this->_last = count($result) ? $result[0] : null;
            return $this->_last;
        }
    }

    public function api_get($id_slug)
    {
        if(!isset($this->_item[$id_slug])) {
            $this->_item[$id_slug] = $this->findItem($id_slug);
        }
        return $this->_item[$id_slug];
    }

    public function api_plugin($options = [])
    {
        Fancybox::widget([
            'selector' => '.easyii-box',
            'options' => $options
        ]);
    }
		
		public function api_renderTree() {
			$tree = Category::tree();
			$html = '';
			foreach($tree as $i=>$node) {
				if(isset($tree[$i-1]) && $tree[$i]->depth>$tree[$i-1]->depth)
					$html .= '<ul>';
				if(count($node->children))
					$html .= '<li>'.$node->title.'</li>';
				else
					$html .= '<li>'.Html::a($node->title, ['articles/cat', 'slug' => $node->slug]).'</li>';
				if(isset($tree[$i+1]) && $tree[$i+1]->depth<$tree[$i]->depth) {
					if($tree[$i]->depth-$tree[$i+1]->depth>=1) {
						for($j=$tree[$i]->depth-$tree[$i+1]->depth; 1<=$j; $j--) {
							$html .= '</ul>';
						}
					}
				}
			}
			echo $html;
		}
		
		public function api_renderTable($category, $return, $whithNameCat=false, $countColumns=1, $interval=1, $maxCountInColumn=10) {
			$withLettersAndIntervals = [];
			$intervals = array_fill(0, $interval, ['']);
			$letters = [];
			if($category) {
				if($whithNameCat) {
					foreach($category->model->children as $i=>$child) {
						if($i==0)
							$withLettersAndIntervals[] = [$child->title, true];
						else
							$withLettersAndIntervals = array_merge($withLettersAndIntervals, $intervals, [[$child->title, true]]);
						foreach($child->items as $item) {
							$withLettersAndIntervals[] = [$item->title];
						}
					}
				}
				else {
					$someLetter = null;
					foreach($category->items(['pagination' => ['pageSize' => 100]]) as $i=>$item) {
						$firstLetter = mb_strtoupper(mb_substr($item->model->title, 0 , 1, 'UTF-8'), 'UTF-8');
						if($i==0)
							$withLettersAndIntervals[] = [$firstLetter];
						elseif($firstLetter!=$someLetter)
							$withLettersAndIntervals = array_merge($withLettersAndIntervals, $intervals, [[$firstLetter]]);
						$withLettersAndIntervals[] = [$item->title, $item->slug];
						$someLetter = $firstLetter;
					}
					$someLetter = null;
					foreach($category->items(['pagination' => ['pageSize' => 100]]) as $i=>$item) {
						$firstLetter = mb_strtoupper(mb_substr($item->model->title, 0 , 1, 'UTF-8'), 'UTF-8');
						if($i==0 || $firstLetter!=$someLetter)
							$letters[] = $firstLetter;
						$someLetter = $firstLetter;
					}
				}
			}
			if(count($withLettersAndIntervals)<=10)
				$countColumns = 1;
			$countInColumn = ceil(count($withLettersAndIntervals) / $countColumns);
			$countInColumn = $countInColumn > $maxCountInColumn ? $countInColumn : $maxCountInColumn;
			$resultArray = [];
			$k = 0;
			$s = 0;
			for($i=0, $count=count($withLettersAndIntervals); $i<$count; $i++) {
				$n = $i - $k * $countInColumn + 1 - $s;
				$inArray = in_array($n, [$countInColumn, $countInColumn-1]);
				if(($n>$countInColumn || $inArray && mb_strlen($withLettersAndIntervals[$i][0], 'UTF-8')==1) &&
				$count>4 && $k+1<$countColumns) {
					$s = 0;
					if($inArray) {
						for($j=$i, $c=($k+1)*$countInColumn; $j<$c; $j++) {
							if($withLettersAndIntervals[$j][0]=='')
								$s = 1;
							$resultArray[$k+1][] = $this->itemToHtml($withLettersAndIntervals[$j],$whithNameCat);
						}
						$i = $j - 1;
					}
					else {
						if($withLettersAndIntervals[$i][0]=='')
							$s = 1;
						$resultArray[$k+1][] = $this->itemToHtml($withLettersAndIntervals[$i],$whithNameCat);
					}
					++$k;
				}
				else
					$resultArray[$k][] = $this->itemToHtml($withLettersAndIntervals[$i],$whithNameCat);
			}
			$maxValue = 0;
			foreach($resultArray as $item) {
				$c = count($item);
				if($c>$maxValue)
					$maxValue = $c;
			}
			if($maxValue>0) {
				foreach($resultArray as &$item) {
					$c = count($item);
					$start_index = $c - 1;
					$num = $maxValue - $c;
					if($num>0) {
						$extraArray = array_fill($start_index, $num, '');
						$item = array_merge($item, $extraArray);
					}
				}
				unset($item);
			}
			$html = '';
			if($whithNameCat) {
				$html .= '</div></div></div>';
				$html .= '<br/><br/>';
			}
			if(!empty($resultArray)) {
				$n = 12 / $countColumns;
				for($i=0, $count=count($resultArray[0]); $i<$count; $i++) {
					$html .= '<div class="row" style="text-align: center;">';
					for($j=0, $count1=count($resultArray); $j<$count1; $j++) {
						$html .= '<div class="col-xs-' . $n . '">' . $resultArray[$j][$i] . '</div>';
					}
					$html .= '</div>';
				}
			}
			if($return=='html')
				echo $html;
			else
				return $withLettersAndIntervals;
		}
		
		public function api_isActive($item, $slug) {
			$letter = Inflector::slug($item[0]);
			$letter = strtoupper($letter);
			$firstLetter = strtoupper(substr($slug, 0 , 1));
			return $letter == $firstLetter;
		}

    public function api_pagination()
    {
        return $this->_adp ? $this->_adp->pagination : null;
    }

    public function api_pages()
    {
        return $this->_adp ? LinkPager::widget(['pagination' => $this->_adp->pagination]) : '';
    }
		
		private function itemToHtml($item, $whithNameCat)
    {
			$html = '';
			if(empty($item[0]))
				$html = '&nbsp;';
			elseif((!$whithNameCat && !isset($item[1])) || ($whithNameCat && isset($item[1])))
				$html = Html::tag('b', $item[0]);
			else {
				if(!$whithNameCat)
					$html = Html::a($item[0], ['catalog/view', 'slug' => $item[1]]);
				else
					$html = $item[0];
			}
			return $html;
		}

    private function findCategory($id_slug)
    {
        $category = Category::find()->where(['or', 'id=:id_slug', 'slug=:id_slug'], [':id_slug' => $id_slug])->status(Item::STATUS_ON)->one();

        return $category ? new CategoryObject($category) : null;
    }

    private function findItem($id_slug)
    {
        $article = Item::find()->where(['or', 'id=:id_slug', 'slug=:id_slug'], [':id_slug' => $id_slug])->status(Item::STATUS_ON)->one();
        if($article) {
            $article->updateCounters(['views' => 1]);
            return new ArticleObject($article);
        } else {
            return null;
        }
    }
}